name: build

on:
  push:
    branches:
      - ci
      - dev
      - "!main"

permissions:
  contents: write

jobs:
  get-version:
    name: get-version
    runs-on: arc-octotail
    steps:
      - uses: actions/checkout@v4
      - name: Grab the version from pyproject.toml
        shell: bash
        run: |
          version="v$(head -n5 pyproject.toml | grep -oE "version = \"[0-9\.]+\"" | cut -d'"' -f2)"
          echo "VERSION=$version" >> $GITHUB_ENV
    outputs:
      version: ${{ env.VERSION }}

  smoke-test:
    name: smoke-test
    runs-on: arc-octotail
    steps:
     - uses: actions/checkout@v4
     - uses: actions/setup-python@v5
       name: Setup python
       id: setup-python
       with:
         python-version: '3.12'
     - name: Install poetry
       uses: snok/install-poetry@v1
       with:
         virtualenvs-create: true
         virtualenvs-in-project: true
         virtualenvs-path: .venv
         installer-parallel: true
     - name: Load cached venv
       id: cached-poetry-dependencies
       uses: actions/cache@v4
       with:
         path: .venv
         key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
     - name: Install dependencies
       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
       run: poetry install --no-interaction
     - name: Run tests
       run: |
         source .venv/bin/activate
         STRICT=1 ./hacks/pycheck octotail
         ./hacks/update-readme --check

  publish-wheels:
    name: publish-wheels
    needs: [ "get-version", "smoke-test" ]
    runs-on: arc-octotail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Setup python
        with:
          python-version: '3.12'
      - name: Install poetry
        shell: bash
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install -q poetry==1.8.3
      - name: Poetry build
        shell: bash
        run: |
          source .venv/bin/activate
          poetry build
      - name: Poetry publish to test.pypi
        shell: bash
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          source .venv/bin/activate
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry publish -r test-pypi --username=__token__ --password="$TEST_PYPI_TOKEN"
      - name: Poetry publish to pypi
        shell: bash
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          source .venv/bin/activate
          poetry publish --username=__token__ --password="$PYPI_TOKEN"

  promote-release:
    if: "github.ref == 'refs/heads/ci' && !contains(github.event.head_commit.message, '[cron]')"
    name: promote-release
    needs: [ "publish-wheels", "get-version" ]
    runs-on: arc-octotail
    steps:
      - uses: actions/checkout@v4
      - name: Promote release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.get-version.outputs.version }}"
          gh release edit "$version" --draft=false --latest
