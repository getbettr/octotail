#!/usr/bin/env python3
""" Hackily graft the output of 'octotail --help' into README.md"""
import os
import re
import subprocess
import sys
import tempfile
from pathlib import Path
from typing import List, NamedTuple

from ptyprocess import PtyProcessUnicode


class Help(NamedTuple):
    """Just a struct."""

    text: List[str]
    start_index: int
    end_index: int


def _get_readme_help(readme: str) -> Help:
    start_index = end_index = 0
    _help = []
    started = False
    for i, line in enumerate(readme.splitlines()):
        if line.strip() == "# octotail --help":
            started = True
            start_index = i
        if started and line.startswith("```"):
            end_index = i
            break
        if started:
            _help.append(line.rstrip())
    return Help(_help, start_index, end_index)


def _get_actual_help(cmd: List[str]) -> List[str]:
    p = PtyProcessUnicode.spawn(cmd, dimensions=(100, 100), env={**os.environ, "NO_COLOR": "1"})
    ansi_escape = re.compile(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])")
    script_output = []
    while True:
        try:
            script_output.append(ansi_escape.sub("", p.readline()).rstrip())
        except EOFError:
            break
    p.close()
    return script_output


def main(check: bool) -> None:
    with tempfile.TemporaryDirectory(delete=True) as tmp_dir:
        readme_temp = Path(tmp_dir) / "readme"
        actual_temp = Path(tmp_dir) / "actual"

        readme = Path("README.md").read_text(encoding="utf-8")
        readme_help = _get_readme_help(readme)
        actual_help = _get_actual_help([".venv/bin/octotail", "--help"])

        readme_temp.write_text("\n".join(readme_help.text[2:]))
        actual_temp.write_text("\n".join(actual_help[1:-1]))

        diff = subprocess.run(["diff", str(readme_temp), str(actual_temp)], check=False)
        if diff.returncode != 0:
            if check:
                print("README.md not in sync!")
                sys.exit(1)

            r_lines = readme.splitlines()
            new_lines = [
                *r_lines[: readme_help.start_index + 2],
                *actual_help[1:-1],
                *r_lines[readme_help.end_index :],
                "",
            ]
            Path("README.md").write_text("\n".join(new_lines), encoding="utf-8")


if __name__ == "__main__":
    _check = len(sys.argv) > 1 and sys.argv[1] == "--check"
    main(_check)
    print("all good cap'n")
